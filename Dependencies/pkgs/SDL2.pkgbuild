pkgname=SDL2
pkgver=2.0.20
pkgrel=2
sources=(
    "https://github.com/libsdl-org/SDL/releases/download/release-${pkgver}/SDL2-${pkgver}.tar.gz" #https://github.com/libsdl-org/SDL/releases/latest
    'SDL2-disable-libs.patch'
    'SDL2-windows-haptic.patch'
    'SDL2-droid-noglctx-handle.patch'
    'SDL2-eventloop-mac.patch'
    'SDL2-force-metal-ios.patch'
    'SDL2-sensor-ios.patch'
)
hashes=(
    'c56aba1d7b5b0e7e999e4a7698c70b63a3394ff9704b5f6e1c57e0c16f04dd06'
    'd3ad2d4622329aa20b44656db68966149659241becdfb82ab31d36ced8ead46f'
    'b6089984c729590b20aa876d90d3738295a57087fe3894b309850c7afd6ff28f'
    'd2360b18140c871442e0b4b7a12462aea1e1cd9dae72b454359e4d808a0f6223'
    '8d86b718ec4ebea6cc49d7457d02cc23eef90a73ef325dadf462e03bc15673b6'
    '18ac95ccc0a915f795bb3a6986beea60fce178729fd3486e1135963c09de3a39'
    '39ee540876ac2bbd1d9595df186b77a174a0507a048853252e8fd60df1df5f04'
)

CFLAGS="$CFLAGS ${cflags[@]} -fPIC"
cflags_win32="-I$outdir/include/khronos"

configopts_win32=(
    '--enable-video-opengles1'
    '--enable-video-opengles2'
)

configopts_mac_extra=(
    '--disable-video-x11'
    '--disable-render-metal'
)

if option_set 'dynamic_sdl'; then
    sharedstatic="static"
    ldflags_win32="-lshlwapi"
else
    sharedstatic="shared"
fi

configopts=(
    "--disable-$sharedstatic"
    '--disable-nas'
    '--enable-sse2' 
    '--enable-haptic'
    '--enable-joystick'
    "--libdir=$outdir/lib"
)

cflags_ios_extra=(
    '-fobjc-arc'
)

configopts_droid=(
    '--disable-pulseaudio'
)

prebuild() {
    pushd "$pkgname-${pkgver}" &>/dev/null

    apply_patch "${sources[1]}"
    apply_patch "${sources[2]}"
    # This is necessary because SDL_GL_MakeCurrent is not thread-safe
    apply_patch "${sources[3]}"
    
    case $(getTarget) in
        darwin-iOS)
            apply_patch "${sources[4]}"
	    apply_patch "${sources[5]}"
            apply_patch "${sources[6]}"
        ;;
        darwin-macOS)
            apply_patch "${sources[4]}"
        ;;
        droid)
            export CC="$(getCC)"
            export CXX="$(getCXX)"
        ;;
    esac
}
build () {
    prebuild
    mkdir build && cd build
    msg "Running cmake"
    
    local ret=0
    local logfile="$logdir/$pkgname.cmake.log"
    
    export SDL2DIR=$outdir

    case $(getTarget) in
        win32)
            cmake -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc -DCMAKE_RC_COMPILER="$(which i686-w64-mingw32-windres)" -DCMAKE_FIND_ROOT_PATH=/usr/i686-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DSDL_LOADSO_WINDOWS=ON -DEXTRA_LDFLAGS=-lshlwapi -DSDL_SSE2=ON -DSDL_NAS=OFF -DSDL_HAPTIC=ON -DSDL_JOYSTICK=ON -DSDL_STATIC_PIC=ON -DCMAKE_CXX_FLAGS=-I"$outdir/include/khronos/" -DCMAKE_INSTALL_PREFIX="$outdir" .. &>"$logfile" || ret=$?
        ;;
        darwin-macOS)
            # This option seems to slow clang down quite a bit on glew compilation (around 4 mins), disable if you need to debug
            lcf="${lcf/-O/-Os}"
            target=""
            cxxstd=""
            if [ "$MMAC_VER_MIN" != "" ]; then
                target="-DCMAKE_OSX_DEPLOYMENT_TARGET=$MMAC_VER_MIN"
                if [ "$MMAC_VER_MIN" != "10.6" ]; then
                    cxxstd="-std=c++11 -stdlib=libc++"
                fi
            fi
            cmake -G "Unix Makefiles" -DSDL_gpu_USE_SYSTEM_EPOXY=ON -DCMAKE_CXX_COMPILER="$(getCXX)" -DCMAKE_C_COMPILER="$(getCC)" -DCMAKE_C_FLAGS="$lcf" -DCMAKE_CXX_FLAGS="$lcxf $cxxstd" $target &>"$logfile" || ret=$?
        ;;
        darwin-iOS)
            cmake -G "Unix Makefiles" -DCMAKE_OSX_SYSROOT="/" -DCMAKE_OSX_DEPLOYMENT_TARGET="" -DSDL_gpu_DISABLE_OPENGL=ON -DSDL_gpu_DISABLE_GLES=OFF -DCMAKE_CXX_COMPILER="$(getCXX)" -DCMAKE_C_COMPILER="$(getCC)" -DCMAKE_C_FLAGS="$lcf" -DCMAKE_CXX_FLAGS="$lcxf" $target &>"$logfile" || ret=$?
        ;;
        droid)
            apply_patch "${sources[0]}"
            if [ "$(getHost)" == "win32" ]; then
                cmake -G "MSYS Makefiles" -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_AR="${CROSS_SYS_PREFIX}$(getHostPrefix)-ar" -DCMAKE_RANLIB="${CROSS_SYS_PREFIX}$(getHostPrefix)-ranlib" -DSDL_gpu_DISABLE_OPENGL=ON -DSDL_gpu_DISABLE_GLES=OFF -DSDL_gpu_DYNAMIC_GLES_3=ON -DCMAKE_CXX_COMPILER="$(getCXX)" -DCMAKE_C_COMPILER="$(getCC)" -DCMAKE_C_FLAGS="$lcf" -DCMAKE_CXX_FLAGS="$lcxf" $target &>"$logfile" || ret=$?
            elif [ "$(getHost)" == "linux-like" ]; then
                cmake -G "Unix Makefiles" -DCMAKE_SYSTEM_NAME=Darwin -DSDL_gpu_DISABLE_OPENGL=ON -DSDL_gpu_DISABLE_GLES=OFF -DSDL_gpu_DYNAMIC_GLES_3=ON -DCMAKE_CXX_COMPILER="$(getCXX)" -DCMAKE_C_COMPILER="$(getCC)" -DCMAKE_C_FLAGS="$lcf" -DCMAKE_CXX_FLAGS="$lcxf" $target &>"$logfile" || ret=$?
            else
                cmake -G "Unix Makefiles" -DSDL_gpu_DISABLE_OPENGL=ON -DSDL_gpu_DISABLE_GLES=OFF -DSDL_gpu_DYNAMIC_GLES_3=ON -DCMAKE_CXX_COMPILER="$(getCXX)" -DCMAKE_C_COMPILER="$(getCC)" -DCMAKE_C_FLAGS="$lcf" -DCMAKE_CXX_FLAGS="$lcxf" $target &>"$logfile" || ret=$?
            fi
        ;;
        linux-like)
            cmake -DSDL_SSE2=ON -DSDL_NAS=OFF -DSDL_HAPTIC=ON -DSDL_JOYSTICK=ON -DSDL_STATIC_PIC=ON -DCMAKE_C_FLAGS="$lcf" -DCMAKE_CXX_FLAGS="$lcxf" -DCMAKE_INSTALL_PREFIX="$outdir" .. &>"$logfile" || ret=$?
        ;;
    esac
    
    if (( $ret )); then
        tail -n 20 "$logfile"
        error "Cmake %s failed" "$pkgname"
        error "The full log is: %s" "$logfile"
        exit 1
    fi
    
    compile
}

compile() {
    case $(getTarget) in
        darwin-iOS)
            cp include/SDL_config_iphoneos.h include/SDL_config.h
        ;;
    esac

    local logfile="$logdir/$pkgname.compile.log"
    local ret=0
    make $MAKEOPTS &>"$logfile" || ret=$?
    if (( $ret )); then
        tail -n 20 "$logfile"
        error "Compiling %s failed" "$pkgname"
        error "The last 20 lines of the log are shown above."
        error "The full log is: %s" "$logfile"
        exit 1
    fi
    msg "Installing"
    local logfile="$logdir/$pkgname.install.log"
    local ret=0
    make install &>"$logfile" || ret=1
    if (( $ret )); then
        error "Installation %s failed" "$pkgname"
        exit 1
    fi

    postbuild

    msg "Finishing %s" "$pkgname"
}

postbuild() {

    # Windows is known for its sane MSYS
    if [ "$(getTarget)" == "win32" ]; then
        local cfgfile=$(cat "$outdir/bin/sdl2-config")
        cfgfile=${cfgfile//" -XCClinker"/""}
        echo "$cfgfile" >"$outdir/bin/sdl2-config"
    elif [ "$(getTarget)" == "win32" ]; then
        unset CC
        unset CXX
    fi
     
    popd &>/dev/null
}

# vim: set syntax=sh:
