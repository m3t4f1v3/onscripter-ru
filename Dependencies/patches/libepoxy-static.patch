--- a/meson.build	2022-02-17 23:56:12.000000000 +1100
+++ b/meson.build	2022-03-28 20:25:08.563821400 +1100
@@ -163,13 +163,13 @@ if host_system == 'windows'
 endif
 
 # Dependencies
-dl_dep = cc.find_library('dl', required: false)
-gl_dep = dependency('gl', required: false)
-egl_dep = dependency('egl', required: false)
+dl_dep = cc.find_library('dl', required: false, static: true)
+gl_dep = dependency('gl', required: false, static: true)
+egl_dep = dependency('egl', required: false, static: true)
 elg_headers_dep = egl_dep.partial_dependency(compile_args: true, includes: true)
 
 # Optional dependencies for tests
-x11_dep = dependency('x11', required: false)
+x11_dep = dependency('x11', required: false, static: true)
 x11_headers_dep = x11_dep.partial_dependency(compile_args: true, includes: true)
 
 # GLES v2 and v1 may have pkg-config files, courtesy of downstream
@@ -177,26 +177,26 @@ x11_headers_dep = x11_dep.partial_depend
 # if we fail
 gles2_dep = dependency('glesv2', required: false)
 if not gles2_dep.found()
-  gles2_dep = cc.find_library('libGLESv2', required: false)
+  gles2_dep = cc.find_library('libGLESv2', required: false, static: true)
 endif
 
-gles1_dep = dependency('glesv1_cm', required: false)
+gles1_dep = dependency('glesv1_cm', required: false, static: true)
 if not gles1_dep.found()
-  gles1_dep = cc.find_library('libGLESv1_CM', required: false)
+  gles1_dep = cc.find_library('libGLESv1_CM', required: false, static: true)
 endif
 
 # On windows, the DLL has to have all of its functions
 # resolved at link time, so we have to link directly against
 # opengl32.  But that's the only GL provider, anyway.
 if host_system == 'windows'
-  opengl32_dep = cc.find_library('opengl32', required: true)
+  opengl32_dep = cc.find_library('opengl32', required: true, static: true)
 
   # When building against static libraries, we need to control
   # the order of the dependencies, and gdi32 provides symbols
   # needed when using opengl32, like SetPixelFormat and
   # ChoosePixelFormat. This is mostly a workaround for older
   # versions of Meson.
-  gdi32_dep = cc.find_library('gdi32', required: true)
+  gdi32_dep = cc.find_library('gdi32', required: true, static: true)
 endif
 
 # Generates the dispatch tables
