name: Build mingw, android and linux

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: install packages
      run: sudo apt install yasm libreadline-dev libasound-dev libgl1-mesa-dev libegl1-mesa-dev libxrandr-dev meson binutils-mingw-w64-i686 gcc-mingw-w64-i686
    - name: configure linux (dev)
      run: ./configure
    - name: make
      run: make -j $(getconf _NPROCESSORS_ONLN)
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: Linux build (dev)
        # Destination path
        path: DerivedData/Posix-x86_64/onscripter-ru
    - name: clean
      run: make clean
    - name: configure linux (release)
      run: ./configure --release-build --strip-binary
    - name: make
      run: make -j $(getconf _NPROCESSORS_ONLN)
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: Linux build (release)
        # Destination path
        path: DerivedData/Posix-x86_64/onscripter-ru
    - name: Disable compiler overrides as they cause problems
      run: unset CC ; unset CXX ; unset CC_FOR_BUILD ; unset CXX_FOR_BUILD
    - name: Configure and build android (dev)
      run: ./Scripts/quickdroid.tool --normal
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: Android build (dev)
        # Destination path
        path: DerivedData/Droid-package/onscripter-ru.apk
    - name: clean
      run: make clean
    - name: Android build (release)
      run: ./Scripts/quickdroid.tool --release
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: Android build (release)
        # Destination path
        path: DerivedData/Droid-package/onscripter-ru.apk
    - name: Disable compiler overrides as they cause problems
      run: unset CC ; unset CXX ; unset CC_FOR_BUILD ; unset CXX_FOR_BUILD
    - name: Set compilers compatible with Windows
      run: export CC=i686-w64-mingw32-gcc ; export CXX=i686-w64-mingw32-g++ ; export LD=i686-w64-mingw32-ld ; exportt AR=i686-w64-mingw32-ar ; export RANLIB=i686-w64-mingw32-ranlib ; export AS=i686-w64-mingw32-as
    - name: configure windows (dev)
      run: ./configure --cross=i686-w64-mingw32
    - name: make
      run: make -j $(getconf _NPROCESSORS_ONLN)
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: Windows build (dev)
        # Destination path
        path: DerivedData/MinGW-i686//onscripter-ru.exe
    - name: clean
      run: make clean
    - name: configure Windows (release)
      run: ./configure --cross=i686-w64-mingw32 --release-build --strip-binary 
    - name: make
      run: make -j $(getconf _NPROCESSORS_ONLN)
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: Windows build (release)
        # Destination path
        path: DerivedData/MinGW-i686//onscripter-ru.exe
    - name: clean
      run: make clean
