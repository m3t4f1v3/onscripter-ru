name: Release

on:
  push:
    branches: [ "github_action" ]
  pull_request:
    branches: [ "github_action" ]
 
jobs:
  Windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04
    strategy:
      matrix: 
        BUILD_TYPE: ["debug","release"]
    env:
      dev: ${{ matrix.BUILD_TYPE == 'debug' && 'dev' || '' }}
      cmd: ${{ matrix.BUILD_TYPE == 'release' && '--release-build --strip-binary' || '' }}
      CC: i686-w64-mingw32-gcc
      CXX: i686-w64-mingw32-g++
      LD: i686-w64-mingw32-ld
      AR: i686-w64-mingw32-ar
      RANLIB: i686-w64-mingw32-ranlib
      AS: i686-w64-mingw32-as
      CXX_FOR_BUILD: i686-w64-mingw32-g++
      CC_FOR_BUILD: i686-w64-mingw32-gcc
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt install -y binutils-mingw-w64-i686 gcc-mingw-w64-i686 yasm
      - name: Env setup
        run: |
          BUILD=$(($(git rev-list --count --first-parent HEAD)+3500))
          echo "Build number ${BUILD}"
          mkdir -p ciout
      - name: Configure
        run: ./configure --cross=i686-w64-mingw32 ${{env.cmd}}
      - name: Build
        run: |
          make clean
          make -j$(nproc)
          mv DerivedData/MinGW-i686/onscripter-ru.exe ciout ; cp -r Resources/Windows/dlls ciout/dlls ; cd ciout
          zip -qry onscripter-ru_win_r${BUILD}_${{env.dev}}.zip onscripter-ru.exe dlls 
